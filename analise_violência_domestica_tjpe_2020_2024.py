# -*- coding: utf-8 -*-
"""Analise viol√™ncia domestica TJPE 2020-2024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/107_1eClMYHdDyTvPX_zCJyvAhMKBc1KZ

# An√°lise Viol√™ncia Domestica TJPE (2020 - 2024)

## Este notebook realiza uma an√°lise explorat√≥ria dos processos judiciais relacionados √† "Viol√™ncia Dom√©stica Contra a Mulher" no Tribunal de Justi√ßa de Pernambuco (TJPE), com base nos dados p√∫blicos disponibilizados via API do DataJud (CNJ).

O objetivo √© identificar tend√™ncias entre 2020 e 2024, per√≠odo que abrange
o contexto da pandemia da COVID-19, e entender o comportamento da demanda
judicial no 1¬∫ grau de jurisdi√ß√£o.

Etapas:
1. Coleta autom√°tica via API DataJud.
2. Filtragem e normaliza√ß√£o dos dados.
3. Cria√ß√£o de gr√°ficos e an√°lise explorat√≥ria.
4. Exporta√ß√£o do dataset final para Power BI.
"""

## Impoprtanto as Bibliotecas

import requests
import pandas as pd
import time
import matplotlib.pyplot as plt
import seaborn as sns
import ast

## Configura√ß√£o inicial da API

URL = "https://api-publica.datajud.cnj.jus.br/api_publica_tjpe/_search"
API_KEY = "cDZHYzlZa0JadVREZDJCendQbXY6SkJlTzNjLV9TRENyQk1RdnFKZGRQdw=="
HEADERS = {
    "Authorization": f"APIKey {API_KEY}",
    "Content-Type": "application/json"
}

## Baixando os dados por ano e assunto

def baixar_dados_ano(ano):
    print(f"\n Coletando dados do ano {ano}...")

    df_total = pd.DataFrame()
    body = {
        "query": {
            "bool": {
                "must": [
                    {"match": {"tribunal": "TJPE"}},
                    {"match": {"grau": "G1"}},
                    {"range": {"dataAjuizamento": {"gte": f"{ano}-01-01", "lte": f"{ano}-12-31"}}},
                    {"match_phrase": {"assuntos.nome": "Viol√™ncia Dom√©stica Contra a Mulher"}}
                ]
            }
        },
        "size": 100,
        "sort": [{"dataAjuizamento": "asc"}]
    }

    session = requests.Session()
    page, total = 1, 0

    while True:
        resp = session.post(URL, headers=HEADERS, json=body)
        if resp.status_code != 200:
            print(f" Erro {resp.status_code}: {resp.text}")
            break

        data = resp.json()
        hits = data.get("hits", {}).get("hits", [])
        if not hits:
            break

        resultados = [h.get("_source") for h in hits]
        df_page = pd.json_normalize(resultados)
        df_total = pd.concat([df_total, df_page], ignore_index=True)
        total += len(df_page)

        print(f" P√°gina {page} baixada ({len(df_page)} registros). Total: {total}")
        body["search_after"] = hits[-1].get("sort")
        page += 1

        # pausa leve pra n√£o sobrecarregar
        time.sleep(1)

    print(f" Ano {ano} finalizado com {len(df_total)} registros.")
    return df_total

## Coleta e uni√£o dos anos

df_final = pd.DataFrame()
for ano in range(2020, 2025):
    df_ano = baixar_dados_ano(ano)
    df_ano["ano"] = ano
    df_final = pd.concat([df_final, df_ano], ignore_index=True)

print("\n Coleta conclu√≠da! Total geral:", len(df_final))

## LIMPEZA E NORMALIZA√á√ÉO

def extrair_assuntos(x):
    if isinstance(x, list):
        return [a.get("nome") for a in x if "nome" in a]
    elif isinstance(x, str):
        try:
            data = ast.literal_eval(x)
            return [a.get("nome") for a in data if "nome" in a]
        except:
            return []
    return []

df_final["assuntos_nomes"] = df_final["assuntos"].apply(extrair_assuntos)
df_final["orgaoJulgador_nome"] = df_final["orgaoJulgador.nome"].fillna("N√£o informado")
df_final["dataAjuizamento"] = pd.to_datetime(df_final["dataAjuizamento"], errors="coerce")
df_final = df_final.drop_duplicates(subset=["id"])

print("\nüßæ Colunas dispon√≠veis:")
print(df_final.columns.tolist()[:20])

"""## AN√ÅLISE E GRAFICOS"""

### Tend√™ncia anual ---
df_ano = df_final.groupby("ano").size()
plt.figure(figsize=(8,5))
df_ano.plot(marker="o", color="purple")
plt.title(" Evolu√ß√£o anual dos processos de viol√™ncia dom√©stica (TJPE 2020‚Äì2024)")
plt.xlabel("Ano")
plt.ylabel("Quantidade de Processos")
plt.grid(True)
plt.tight_layout()
plt.show()

### Distribui√ß√£o mensal ---
df_final["mes"] = df_final["dataAjuizamento"].dt.month
plt.figure(figsize=(10,5))
sns.countplot(x="mes", data=df_final, palette="magma")
plt.title(" Distribui√ß√£o mensal dos processos (2020‚Äì2024)")
plt.xlabel("M√™s")
plt.ylabel("Quantidade de Processos")
plt.tight_layout()
plt.show()

### Top 10 √≥rg√£os julgadores
top_orgaos = df_final["orgaoJulgador_nome"].value_counts().head(10)
plt.figure(figsize=(10,5))
top_orgaos.plot(kind="barh", color="teal")
plt.title(" Top 10 √≥rg√£os julgadores com mais casos de viol√™ncia dom√©stica")
plt.xlabel("Quantidade de Processos")
plt.tight_layout()
plt.show()

##EXPORTANDO

arquivo_csv = "datajud_tjpe_violencia_2020_2024.csv"
df_final.to_csv(arquivo_csv, index=False, encoding="utf-8-sig")

from google.colab import files
files.download("datajud_tjpe_violencia_2020_2024.csv")


print(f"\n Arquivo salvo: {arquivo_csv}")
print(f"Total de registros: {len(df_final)}")
print("\n Agora √© s√≥ fazer o download e importar no Power BI!")

# MINI-INSIGHTS AUTOM√ÅTICOS

if not df_final.empty:
    print("\n INSIGHTS INICIAIS:")
    print(f"- Per√≠odo analisado: {df_final['ano'].min()} a {df_final['ano'].max()}")
    print(f"- Total de processos: {len(df_final)}")
    print(f"- √ìrg√£o julgador com mais casos: {top_orgaos.index[0]}")


else:
    print(" Nenhum dado retornado pela API.")

ALGUMAS CORRE√á√ÉOS PARA MELHORAR A ANALISE

##Remover a hora da data de ajuizamento
df_final["dataAjuizamento"] = pd.to_datetime(df_final["dataAjuizamento"], errors="coerce").dt.date


##Corrigir apenas as varas da Capital espec√≠ficas
df_final["orgaoJulgador.nome"] = df_final["orgaoJulgador.nome"].replace({
    "1¬™ VARA DE ENFRENTAMENTO √Ä VIOL√äNCIA DOM√âSTICA E FAMILIAR CONTRA A MULHER DA CAPITAL":
        "VARA DE ENFRENTAMENTO √Ä VIOL√äNCIA DOM√âSTICA E FAMILIAR CONTRA A MULHER DA CAPITAL",
    "2¬™ VARA DE ENFRENTAMENTO √Ä VIOL√äNCIA DOM√âSTICA E FAMILIAR CONTRA A MULHER DA CAPITAL":
        "VARA DE ENFRENTAMENTO √Ä VIOL√äNCIA DOM√âSTICA E FAMILIAR CONTRA A MULHER DA CAPITAL"
})

## Substituir o c√≥digo IBGE pelo nome do munic√≠pio
mapa_municipios = {
    2611606: "Recife",
    2607901: "Jaboat√£o dos Guararapes",
    2609600: "Olinda",
    2603453: "Camaragibe",
    2610707: "Paulista",
    2606804: "Igarassu",
    2609402: "Nazar√© da Mata",
    2602505: "Caruaru",
    2600054: "Abreu e Lima",
    2605459: "Garanhuns",
    2616407: "Vit√≥ria de Santo Ant√£o",
    2609006: "Moreno",
    2609154: "Ouricuri",
    2613701: "Serra Talhada",
    2607109: "Ipojuca"
}

df_final["orgaoJulgador.municipio"] = df_final["orgaoJulgador.codigoMunicipioIBGE"].replace(mapa_municipios)

## Salvar a base limpa e atualizada
arquivo_limpo = "datajud_tjpe_violencia_2020_2024_limpa.csv"
df_final.to_csv(arquivo_limpo, index=False, encoding="utf-8-sig")

print(f"Base limpa salva com sucesso: {arquivo_limpo}")
print(f"Total de registros: {len(df_final)}")

## Baixando direto pro PC
from google.colab import files
files.download(arquivo_limpo)